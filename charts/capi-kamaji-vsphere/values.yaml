vSphere:
  # -- Datacenter to use
  dataCenter: "datacenter"
  # -- VSphere server dns name or address
  server: "server.sample.org"
  # -- VSphere server port
  port: 443
  # -- If vCenter uses a self-signed cert
  insecure: false
  # -- VSphere https TLS thumbprint
  tlsThumbprint: ""
  # -- Path to the CA file if it has been mounted into the pod.
  caFile: ""
  # -- VSphere Identity Management
  identityRef:
    # -- Specifies whether use VSphereClusterIdentity or Secret
    type: VSphereClusterIdentity
    # -- Specifies the name of the VSphereClusterIdentity or Secret
    name: vsphere-cluster-identity

ipamProvider:
  # -- Enable the IPAMProvider usage
  enabled: true
  # -- IPAMProvider ranges
  ranges:
    - "192.168.0.0/24"
  # -- IPAMProvider prefix
  prefix: "24"
  # -- IPAMProvider gateway
  gateway: "192.168.0.1"

cluster:
  # -- Cluster name. If unset, the release name will be used
  name: ""
  clusterNetwork:
    # -- API Server port
    apiServerPort: 6443
    # -- Service Domain for cluster DNS
    serviceDomain: cluster.local
    pods:
      # -- CIDR range for pods
      cidrBlocks:
      - "10.93.0.0/16"
    services: 
      # -- CIDR range for services
      cidrBlocks:
      - "10.96.0.0/16"
  controlPlane:
    # -- Labels to add to the control plane
    labels:
      cni: calico
    # -- Number of control plane replicas
    replicas: 2
    # -- extraArgs for the control plane components
    apiServer:
      extraArgs: []
    controllerManager:
      extraArgs:
        - --cloud-provider=external
    scheduler:
      extraArgs: []
    # -- KamajiControlPlane dataStoreName
    dataStoreName: default
    # Set to null or remove the key entirely to disable the addon
    # addons:
    #   coreDNS: {}
    #   kubeProxy: {}
    #   konnectivity: null
    # -- Configure addons for the control plane
    addons:
      # -- CoreDNS addon configuration
      coreDNS: {}
      # -- Kube-proxy addon configuration
      kubeProxy: {}
      # -- Konnectivity addon configuration
      konnectivity: {}
    # -- Configure how KamajiControlPlane deployment should be done
    deployment:
      # -- Additional metadata as labels and annotations
      additionalMetadata: 
        labels: {}
        annotations: {}
      # -- Pods Additional metadata as labels and annotations
      podAdditionalMetadata:
        labels: {}
        annotations: {}
      # -- Affinity scheduling rules
      affinity: {}
      # -- Tolerations for scheduling
      tolerations: []
      # -- NodeSelector for scheduling
      nodeSelector:
        kubernetes.io/os: linux
      # -- TopologySpreadConstraints for scheduling
      topologySpreadConstraints: []
    kubelet:
      # -- kubelet cgroupfs configuration
      cgroupfs: systemd
      # -- kubelet preferredAddressTypes order
      # preferredAddressTypes: []
    network:
      # -- Ingress configuration (optional)
      # ingress: {}
      # -- Type of service used to expose the Kubernetes API server
      serviceType: LoadBalancer
      # -- Address used to expose the Kubernetes API server. If not set, the service will be exposed on the first available address.
      serviceAddress: ""
      # -- Annotations to use for the control plane service
      serviceAnnotations: {}
      # When using MetalLB to expose the Control Plane, set as the following to specify a specific IP address for the service
      # serviceAddress: "10.9.62.25"
      # serviceAnnotations:
      #   metallb.universe.tf/loadBalancerIPs: "10.9.62.25"
      # -- Labels to use for the control plane service
      serviceLabels: {}
      # -- List of additional Subject Alternative Names to use for the API Server serving certificate
      certSANs: []
    # -- Kubernetes version
    version: v1.32.0
  metrics:
    # -- Enable metrics collection. ServiceMonitor custom resource definition must be installed on the Management cluster.
    enabled: false
    # -- ServiceAccount for scraping metrics
    serviceAccount:
      # -- ServiceAccount name used for scraping metrics
      name: kube-prometheus-stack-prometheus
      # -- ServiceAccount namespace
      namespace: monitoring-system

nodePools:
  - name: default
    # -- VSphere datastore to use
    dataStore: "datastore"
    # -- VSphere folder to store VMs
    folder: "default-pool"
    # -- VSphere resource pool to use
    resourcePool: "*/Resources"
    # -- VSphere storage policy to use
    storagePolicyName: ""
    # -- VSphere template to clone
    template: "ubuntu-2404-kube-v1.32.0"
    # -- VSphere network for VMs and CSI
    network: "network"
    # -- Number of worker VMs instances
    replicas: 3
    autoscaling:
      # -- Enable autoscaling
      enabled: false
      # -- Minimum number of instances in the pool
      minSize: "2"
      # -- Maximum number of instances in the pool
      maxSize: "6"
    # -- Disk size of VM in GiB
    diskGiB: 40
    # -- Memory to allocate to worker VMs
    memoryMiB: 4096
    # -- Number of vCPUs to allocate to worker instances
    numCPUs: 2
    # -- Use dhcp for ipv4 configuration
    dhcp4: false
    # -- Static network routes if required
    staticRoutes: []
      # - to: 0.0.0.0
      #   via: 192.168.1.254
      #   metric: 100
    # -- Use an IPAMProvider pool to reserve IPs
    addressesFromPools:
      # -- Enable the IPAMProvider usage
      enabled: true
    # -- Nameservers for VMs DNS resolution if required
    nameServers:
    - "8.8.8.8"
    # # -- IP addresses to assign to the VMs if required
    # ipAddrs: []
    # -- Search domains suffixes if required
    # searchDomains: []
    # # -- VM network domain if required
    # domain: ""
    # # -- IPv4 gateway if required
    # gateway: ""
    # -- users to create on machines
    users:
      # -- username to create
    - name: ubuntu
      # -- SSH shell to use
      shell: /bin/bash
      # -- SSH password to use. Use mkpasswd -m sha-512 to generate the password
      # passwd: "$6$E0UW ..."
      # -- Lock login password
      lockPassword: true
      # -- SSH public key to add
      sshAuthorizedKeys: []
      # -- sudoers configuration
      sudo: ALL=(ALL) NOPASSWD:ALL
    # # -- Additional cloud-init files to pass to the machines
    # additionalCloudInitFiles: |
    #   #cloud-config
    #   timezone: Europe/Rome
    # -- Labels to add to the node pool when joining the cluster
    # labels: "node.kubernetes.io/node=foo"
    # -- Taints to add to the node pool when joining the cluster
    # taints: "node.kubernetes.io/node:NoSchedule"
    # -- Pre kubeadm commands to run on the machines
    preKubeadmCommands:
    - hostnamectl set-hostname "{{ ds.meta_data.hostname }}"
    - echo "::1         ipv6-localhost ipv6-loopback localhost6 localhost6.localdomain6" >/etc/hosts
    - echo "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4" >>/etc/hosts
    # - echo "vm.max_map_count=262144" >> /etc/sysctl.conf
    # - sysctl -p
    # -- Post kubeadm commands to run on the machines
    postKubeadmCommands: []
    # - echo "node joined" >> /var/log/cloud-init.log
vSphereCloudControllerManager:
  # -- Labels for toplogy regions and zones
  topology: 
    region: "k8s-region"
    zone: "k8s-zone"
  # -- Image of the vsphere-cloud-controller-manager to install. 
  image:
     # -- Set the image registry
    registry: registry.k8s.io
    # -- Set the image repository
    repository: cloud-pv-vsphere/cloud-provider-vsphere
    # -- The tag should be equivalent to the upstream Kubernetes version.
    tag: v1.32.0
    # -- Set the image pull policy.
    pullPolicy: IfNotPresent
  secret:
    # -- The name of an existing Secret to access the vCenter API
    name: vsphere-config-secret
    # -- Additional metadata as labels and annotations
  additionalMetadata: 
    labels: {}
    annotations: {}
  # -- Pods Additional metadata as labels and annotations
  podAdditionalMetadata:
    labels: {}
    annotations: {}
  # -- Affinity scheduling rules
  affinity: {}
  # -- Tolerations for scheduling
  tolerations: []
  # -- NodeSelector for scheduling
  nodeSelector:
    kubernetes.io/os: linux
  # -- TopologySpreadConstraints for scheduling
  topologySpreadConstraints: []

